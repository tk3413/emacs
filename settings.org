#+TITLE: settings
#+AUTHOR: taimore khan
#+PROPERTY: header-args :results silent

* bootstrap
** shell path on mac
Please visit [[https://github.com/purcell/exec-path-from-shell][this link]] and perform the setup so that the shell is linked.
** defaults
#+begin_src emacs-lisp
  (setq-default
   cursor-in-non-selected-windows nil ; disable cursor in inactive windows
   cursor-type '(hbar . 2)            ; underline cursor instead of block
   delete-by-moving-to-trash t        ; delete files to trash
   initial-scratch-message ""         ; default string in scratch buffer
   inhibit-startup-screen t           ; disable startup screen
   )
  (fset 'yes-or-no-p 'y-or-n-p)      ; prefer y/n to yes/no
  (menu-bar-mode -1)                 ; disable menu bar
  (tool-bar-mode -1)
  (global-hl-line-mode +1)           ; highlight current line

  (setq default-directory "~/")      ; set default to home
  (setq treemacs-icon-size 0)        ; disable icons with treemacs
#+end_src

** line numbers
#+begin_src emacs-lisp
  (add-hook 'conf-mode-hook #'display-line-numbers-mode)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (add-hook 'text-mode-hook #'display-line-numbers-mode)

  (setq-default
   display-line-numbers-current-absolute nil
   display-line-numbers-width 2)
#+end_src

** packages
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives
	'(("gnu"          . "https://elpa.gnu.org/packages/")
	  ("melpa"        . "http://melpa.org/packages/")
	  ("melpa-stable" . "http://stable.melpa.org/packages/")
	  ("elpy"         . "http://jorgenschaefer.github.io/packages/")
	  ("org"          . "http://orgmode.org/elpa/")))
  (package-initialize)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package t))
  (setq-default
   use-package-always-defer t
   use-package-always-ensure t)
#+END_SRC

** theme
#+begin_src emacs-lisp
  (load-theme 'solarized-light t)
#+end_src


** treemacs
#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook 'treemacs)
#+end_src

** dim
#+begin_src emacs-lisp
  (add-hook 'after-init-hook 'auto-dim-other-buffers-mode)
#+end_src

** help
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish (which-key-mode)
    :config (setq which-key-idle-delay 1))
#+end_src

* completion
** color
changes the color of text when typing hex to the color it is
#0000FF
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :hook
    (Prog-mode . rainbow-mode)
    :custom
    (rainbow-x-colors nil))
#+end_src

#+RESULTS:
| rainbow-mode | rainbow-delimiters-mode | display-line-numbers-mode |

** company
#+BEGIN_SRC emacs-lisp .
  (use-package company
    :hook
    (after-init . global-company-mode)
    :custom
    (company-dabbrev-downcase nil)
    (company-dabbrev-ignore-case nil)
    (company-dabbrev-other-buffers nil)
    (company-global-modes '(not help-mode message-mode))
    (company-idle-delay 0)
    (company-minimum-prefix-length 2)
    (company-require-match nil)
    (company-selection-wrap-around t)
    (company-tooltip-align-annotations t)
    (company-tooltip-flip-when-above t)
    (company-tooltip-offset-display nil)
    (company-tooltip-width-grow-only t))
#+END_SRC

** dictionary
#+begin_src emacs-lisp .
  (use-package define-word)
#+end_src

** parentheses
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))
#+end_src

** whitespace
#+begin_src emacs-lisp
  (use-package whitespace
    :ensure nil
    :hook
    (prog-mode . whitespace-mode)
    (text-mode . whitespace-mode)
    :custom
    (whitespace-style '(face empty indentation::space tab trailing)))
#+end_src

* languages
** clojure
#+begin_src emacs-lisp

#+end_src
** javascript
#+begin_src emacs-lisp
  (use-package js2-mode)

  (use-package add-node-modules-path
    :config
    (add-hook 'js-mode-hook #'add-node-modules-path))
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)

  (add-hook 'js2-mode-hook #'js2-refactor-mode)
  (js2r-add-keybindings-with-prefix "C-c C-r")
  (define-key js2-mode-map (kbd "C-k") #'js2r-kill)

  ;; js-mode (which js2 is based on) binds "M-." which conflicts with xref, so
  ;; unbind it.
  (define-key js-mode-map (kbd "M-.") nil)

  (add-hook 'js2-mode-hook (lambda ()
			     (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))
#+end_src
** java
#+begin_src emacs-lisp
  (use-package flycheck)
  (use-package yasnippet :config (yas-global-mode))
  (use-package lsp-mode :hook ((lsp-mode . lsp-enable-which-key-integration))
    :config (setq lsp-completion-enable-additional-text-edit nil))
  (use-package hydra)
  (use-package lsp-ui)
  (use-package lsp-java :config (add-hook 'java-mode-hook 'lsp))
  (use-package dap-mode :after lsp-mode :config (dap-auto-configure-mode))
  (use-package dap-java :ensure nil)
  (use-package helm-lsp)
  (use-package helm
    :config (helm-mode))
  (use-package lsp-treemacs)
#+end_src
** json
#+begin_src emacs-lisp
  (use-package json-mode
    :mode "\\.json\\'")
#+end_src

** python
#+begin_src emacs-lisp
  (setq elpy-rpc-virtualenv-path 'current)

#+end_src

*** inside project virtual environment
#+begin_src shell :eval no
  source venv/bin/activate
  pip3 install jedi autopep8 yapf black autopep8 flake8
#+end_src

** rust
#+begin_src emacs-lisp
  (require 'rust-mode)
  (setq rust-format-on-save t)
#+end_src
** yaml
#+begin_src emacs-lisp
  (use-package yaml-mode)
  (setq byte-compile-warnings '(cl-functions)) ; here because this package throws warnings on init
#+end_src

* rss
** install
use elfeed
#+begin_src emacs-lisp
  (setq elfeed-db-directory "~/elfeed.org")

  (setq-default elfeed-search-title-max-width 100)
  (setq-default elfeed-search-title-min-width 100)
#+end_src

set keybinding for elfeed
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x w") 'elfeed)
#+end_src

** feed list
#+begin_src emacs-lisp
  (setq elfeed-feeds
	'(
	  ("http://news.ycombinator.com/rss" hacker)
	  ))
#+end_src
